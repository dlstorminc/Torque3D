
/*  A Bison parser, made from cmdgram.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse CMDparse
#define yylex CMDlex
#define yyerror CMDerror
#define yylval CMDlval
#define yychar CMDchar
#define yydebug CMDdebug
#define yynerrs CMDnerrs
#define	rwDEFINE	258
#define	rwENDDEF	259
#define	rwDECLARE	260
#define	rwDECLARESINGLETON	261
#define	rwBREAK	262
#define	rwELSE	263
#define	rwCONTINUE	264
#define	rwGLOBAL	265
#define	rwIF	266
#define	rwNIL	267
#define	rwRETURN	268
#define	rwWHILE	269
#define	rwDO	270
#define	rwENDIF	271
#define	rwENDWHILE	272
#define	rwENDFOR	273
#define	rwDEFAULT	274
#define	rwFOR	275
#define	rwFOREACH	276
#define	rwFOREACHSTR	277
#define	rwIN	278
#define	rwDATABLOCK	279
#define	rwSWITCH	280
#define	rwCASE	281
#define	rwSWITCHSTR	282
#define	rwCASEOR	283
#define	rwPACKAGE	284
#define	rwNAMESPACE	285
#define	rwCLASS	286
#define	rwASSERT	287
#define	ILLEGAL_TOKEN	288
#define	CHRCONST	289
#define	INTCONST	290
#define	TTAG	291
#define	VAR	292
#define	IDENT	293
#define	TYPEIDENT	294
#define	DOCBLOCK	295
#define	STRATOM	296
#define	TAGATOM	297
#define	FLTCONST	298
#define	opINTNAME	299
#define	opINTNAMER	300
#define	opMINUSMINUS	301
#define	opPLUSPLUS	302
#define	STMT_SEP	303
#define	opSHL	304
#define	opSHR	305
#define	opPLASN	306
#define	opMIASN	307
#define	opMLASN	308
#define	opDVASN	309
#define	opMODASN	310
#define	opANDASN	311
#define	opXORASN	312
#define	opORASN	313
#define	opSLASN	314
#define	opSRASN	315
#define	opCAT	316
#define	opEQ	317
#define	opNE	318
#define	opGE	319
#define	opLE	320
#define	opAND	321
#define	opOR	322
#define	opSTREQ	323
#define	opCOLONCOLON	324
#define	opMDASN	325
#define	opNDASN	326
#define	opNTASN	327
#define	opSTRNE	328
#define	UNARY	329

#line 1 "cmdgram.y"


// bison --defines=cmdgram.h --verbose -o cmdgram.cpp -p CMD CMDgram.y

// Make sure we don't get gram.h twice.
#define _CMDGRAM_H_

#include <stdlib.h>
#include <stdio.h>
#include "console/console.h"
#include "console/compiler.h"
#include "console/consoleInternal.h"
#include "core/strings/stringFunctions.h"

#ifndef YYDEBUG
#define YYDEBUG 0
#endif

#define YYSSIZE 350

int outtext(char *fmt, ...);
extern int serrors;

#define nil 0
#undef YY_ARGS
#define YY_ARGS(x)   x

int CMDlex();
void CMDerror(char *, ...);

#ifdef alloca
#undef alloca
#endif
#define alloca dMalloc

template< typename T >
struct Token
{
   T value;
   U32 lineNumber;
};

#line 44 "cmdgram.y"

        /* Reserved Word Definitions */
#line 55 "cmdgram.y"

        /* Constants and Identifier Definitions */
#line 69 "cmdgram.y"

        /* Operator Definitions */

#line 82 "cmdgram.y"
typedef union {
   Token< char >           c;
   Token< int >            i;
   Token< const char* >    s;
   Token< char* >          str;
   Token< double >         f;
   StmtNode*               stmt;
   ExprNode*               expr;
   SlotAssignNode*         slist;
   VarNode*                var;
   SlotDecl                slot;
   InternalSlotDecl        intslot;
   ObjectBlockDecl         odcl;
   ObjectDeclNode*         od;
   AssignDecl              asn;
   IfStmtNode*             ifnode;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		389
#define	YYFLAG		-32768
#define	YYNTBASE	100

#define YYTRANSLATE(x) ((unsigned)(x) <= 329 ? yytranslate[x] : 140)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    64,     2,     2,     2,    54,    53,     2,    55,
    56,    46,    44,    57,    45,    51,    47,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    58,    59,    48,
    50,    49,    96,    65,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    92,     2,    99,    62,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    60,    52,    61,    63,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    93,    94,    95,    97,    98
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     6,     8,    10,    12,    19,    21,    24,
    25,    28,    30,    32,    34,    36,    38,    40,    43,    46,
    49,    53,    56,    61,    68,    70,    79,    90,    91,    93,
    95,    99,   110,   121,   129,   142,   152,   163,   171,   172,
   175,   176,   178,   179,   182,   183,   185,   187,   190,   193,
   197,   201,   203,   211,   219,   224,   232,   238,   240,   244,
   250,   258,   264,   271,   281,   290,   299,   307,   316,   324,
   332,   339,   347,   355,   357,   359,   363,   367,   371,   375,
   379,   383,   387,   391,   395,   398,   401,   403,   409,   413,
   417,   421,   425,   429,   433,   437,   441,   445,   449,   453,
   457,   461,   464,   467,   469,   471,   473,   475,   477,   479,
   481,   483,   485,   490,   494,   501,   505,   509,   511,   515,
   517,   519,   522,   525,   528,   531,   534,   537,   540,   543,
   546,   549,   551,   553,   555,   559,   565,   572,   581,   584,
   590,   593,   597,   603,   608,   615,   622,   627,   634,   635,
   637,   641,   643,   647,   648,   650,   652,   655,   660,   666,
   671,   679,   688,   690
};

static const short yyrhs[] = {   101,
     0,     0,   101,   102,     0,   106,     0,   107,     0,   103,
     0,    29,    38,    60,   104,    61,    59,     0,   107,     0,
   104,   107,     0,     0,   105,   106,     0,   121,     0,   122,
     0,   123,     0,   124,     0,   110,     0,   118,     0,     7,
    59,     0,     9,    59,     0,    13,    59,     0,    13,   126,
    59,     0,   125,    59,     0,    36,    50,   126,    59,     0,
    36,    50,   126,    57,   126,    59,     0,    40,     0,     3,
    38,    55,   108,    56,    60,   105,    61,     0,     3,    38,
    91,    38,    55,   108,    56,    60,   105,    61,     0,     0,
   109,     0,    37,     0,   109,    57,    37,     0,    24,   129,
    55,   126,   112,    56,    60,   136,    61,    59,     0,     5,
   129,    55,   113,   112,   114,    56,    60,   115,    61,     0,
     5,   129,    55,   113,   112,   114,    56,     0,     5,   129,
    55,    92,   113,    99,   112,   114,    56,    60,   115,    61,
     0,     5,   129,    55,    92,   113,    99,   112,   114,    56,
     0,     6,   129,    55,   113,   112,   114,    56,    60,   115,
    61,     0,     6,   129,    55,   113,   112,   114,    56,     0,
     0,    58,    38,     0,     0,   126,     0,     0,    57,   135,
     0,     0,   137,     0,   116,     0,   137,   116,     0,   111,
    59,     0,   116,   111,    59,     0,    60,   105,    61,     0,
   106,     0,    25,    55,   126,    56,    60,   119,    61,     0,
    27,    55,   126,    56,    60,   119,    61,     0,    26,   120,
    58,   105,     0,    26,   120,    58,   105,    19,    58,   105,
     0,    26,   120,    58,   105,   119,     0,   126,     0,   120,
    28,   126,     0,    11,    55,   126,    56,   117,     0,    11,
    55,   126,    56,   117,     8,   117,     0,    14,    55,   126,
    56,   117,     0,    15,   117,    14,    55,   126,    56,     0,
    20,    55,   126,    59,   126,    59,   126,    56,   117,     0,
    20,    55,   126,    59,   126,    59,    56,   117,     0,    20,
    55,   126,    59,    59,   126,    56,   117,     0,    20,    55,
   126,    59,    59,    56,   117,     0,    20,    55,    59,   126,
    59,   126,    56,   117,     0,    20,    55,    59,   126,    59,
    56,   117,     0,    20,    55,    59,    59,   126,    56,   117,
     0,    20,    55,    59,    59,    56,   117,     0,    21,    55,
    37,    23,   126,    56,   117,     0,    22,    55,    37,    23,
   126,    56,   117,     0,   131,     0,   131,     0,    55,   126,
    56,     0,   126,    62,   126,     0,   126,    54,   126,     0,
   126,    53,   126,     0,   126,    52,   126,     0,   126,    44,
   126,     0,   126,    45,   126,     0,   126,    46,   126,     0,
   126,    47,   126,     0,    45,   126,     0,    46,   126,     0,
    36,     0,   126,    96,   126,    58,   126,     0,   126,    48,
   126,     0,   126,    49,   126,     0,   126,    86,   126,     0,
   126,    87,   126,     0,   126,    84,   126,     0,   126,    85,
   126,     0,   126,    89,   126,     0,   126,    71,   126,     0,
   126,    72,   126,     0,   126,    88,   126,     0,   126,    90,
   126,     0,   126,    97,   126,     0,   126,    65,   126,     0,
    64,   126,     0,    63,   126,     0,    42,     0,    43,     0,
    35,     0,     7,     0,   127,     0,   128,     0,    38,     0,
    41,     0,    37,     0,    37,    92,   139,    99,     0,   126,
    51,    38,     0,   126,    51,    38,    92,   139,    99,     0,
   126,    66,   129,     0,   126,    67,   129,     0,    38,     0,
    55,   126,    56,     0,    69,     0,    68,     0,    73,   126,
     0,    74,   126,     0,    75,   126,     0,    76,   126,     0,
    77,   126,     0,    78,   126,     0,    79,   126,     0,    80,
   126,     0,    81,   126,     0,    82,   126,     0,   132,     0,
   133,     0,   111,     0,    37,    50,   126,     0,    37,    50,
    60,   135,    61,     0,    37,    92,   139,    99,    50,   126,
     0,    37,    92,   139,    99,    50,    60,   135,    61,     0,
    37,   130,     0,    37,    92,   139,    99,   130,     0,   127,
   130,     0,   127,    50,   126,     0,   127,    50,    60,   135,
    61,     0,    38,    55,   134,    56,     0,    38,    91,    38,
    55,   134,    56,     0,   126,    51,    38,    55,   134,    56,
     0,    32,    55,   126,    56,     0,    32,    55,   126,    57,
    41,    56,     0,     0,   135,     0,    60,   135,    61,     0,
   126,     0,   135,    57,   126,     0,     0,   137,     0,   138,
     0,   137,   138,     0,    38,    50,   126,    59,     0,    39,
    38,    50,   126,    59,     0,    24,    50,   126,    59,     0,
    38,    92,   139,    99,    50,   126,    59,     0,    39,    38,
    92,   139,    99,    50,   126,    59,     0,   126,     0,   139,
    57,   126,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   161,   166,   168,   173,   175,   177,   182,   187,   189,   194,
   196,   201,   202,   203,   204,   205,   206,   207,   209,   211,
   213,   215,   217,   219,   221,   226,   228,   233,   235,   240,
   242,   247,   252,   254,   256,   258,   260,   262,   267,   269,
   274,   276,   281,   283,   288,   290,   292,   294,   299,   301,
   306,   308,   313,   315,   320,   322,   324,   329,   331,   336,
   338,   343,   345,   350,   352,   354,   356,   358,   360,   362,
   364,   369,   371,   376,   381,   383,   385,   387,   389,   391,
   393,   395,   397,   399,   401,   403,   405,   407,   409,   411,
   413,   415,   417,   419,   421,   423,   425,   427,   429,   431,
   433,   435,   437,   439,   441,   443,   445,   447,   449,   451,
   453,   455,   457,   462,   464,   469,   471,   476,   478,   483,
   485,   487,   489,   491,   493,   495,   497,   499,   501,   503,
   505,   510,   512,   514,   516,   518,   520,   522,   524,   526,
   528,   530,   532,   537,   539,   541,   546,   548,   553,   555,
   557,   562,   564,   569,   571,   576,   578,   583,   585,   587,
   589,   591,   596,   598
};

static const char * const yytname[] = {   "$","error","$undefined.","rwDEFINE",
"rwENDDEF","rwDECLARE","rwDECLARESINGLETON","rwBREAK","rwELSE","rwCONTINUE",
"rwGLOBAL","rwIF","rwNIL","rwRETURN","rwWHILE","rwDO","rwENDIF","rwENDWHILE",
"rwENDFOR","rwDEFAULT","rwFOR","rwFOREACH","rwFOREACHSTR","rwIN","rwDATABLOCK",
"rwSWITCH","rwCASE","rwSWITCHSTR","rwCASEOR","rwPACKAGE","rwNAMESPACE","rwCLASS",
"rwASSERT","ILLEGAL_TOKEN","CHRCONST","INTCONST","TTAG","VAR","IDENT","TYPEIDENT",
"DOCBLOCK","STRATOM","TAGATOM","FLTCONST","'+'","'-'","'*'","'/'","'<'","'>'",
"'='","'.'","'|'","'&'","'%'","'('","')'","','","':'","';'","'{'","'}'","'^'",
"'~'","'!'","'@'","opINTNAME","opINTNAMER","opMINUSMINUS","opPLUSPLUS","STMT_SEP",
"opSHL","opSHR","opPLASN","opMIASN","opMLASN","opDVASN","opMODASN","opANDASN",
"opXORASN","opORASN","opSLASN","opSRASN","opCAT","opEQ","opNE","opGE","opLE",
"opAND","opOR","opSTREQ","opCOLONCOLON","'['","opMDASN","opNDASN","opNTASN",
"'?'","opSTRNE","UNARY","']'","start","decl_list","decl","package_decl","fn_decl_list",
"statement_list","stmt","fn_decl_stmt","var_list_decl","var_list","datablock_decl",
"object_decl","parent_block","object_name","object_args","object_declare_block",
"object_decl_list","stmt_block","switch_stmt","case_block","case_expr","if_stmt",
"while_stmt","for_stmt","foreach_stmt","expression_stmt","expr","slot_acc","intslot_acc",
"class_name_expr","assign_op_struct","stmt_expr","funcall_expr","assert_expr",
"expr_list_decl","expr_list","slot_assign_list_opt","slot_assign_list","slot_assign",
"aidx_expr",""
};
#endif

static const short yyr1[] = {     0,
   100,   101,   101,   102,   102,   102,   103,   104,   104,   105,
   105,   106,   106,   106,   106,   106,   106,   106,   106,   106,
   106,   106,   106,   106,   106,   107,   107,   108,   108,   109,
   109,   110,   111,   111,   111,   111,   111,   111,   112,   112,
   113,   113,   114,   114,   115,   115,   115,   115,   116,   116,
   117,   117,   118,   118,   119,   119,   119,   120,   120,   121,
   121,   122,   122,   123,   123,   123,   123,   123,   123,   123,
   123,   124,   124,   125,   126,   126,   126,   126,   126,   126,
   126,   126,   126,   126,   126,   126,   126,   126,   126,   126,
   126,   126,   126,   126,   126,   126,   126,   126,   126,   126,
   126,   126,   126,   126,   126,   126,   126,   126,   126,   126,
   126,   126,   126,   127,   127,   128,   128,   129,   129,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
   130,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,   131,   131,   132,   132,   132,   133,   133,   134,   134,
   134,   135,   135,   136,   136,   137,   137,   138,   138,   138,
   138,   138,   139,   139
};

static const short yyr2[] = {     0,
     1,     0,     2,     1,     1,     1,     6,     1,     2,     0,
     2,     1,     1,     1,     1,     1,     1,     2,     2,     2,
     3,     2,     4,     6,     1,     8,    10,     0,     1,     1,
     3,    10,    10,     7,    12,     9,    10,     7,     0,     2,
     0,     1,     0,     2,     0,     1,     1,     2,     2,     3,
     3,     1,     7,     7,     4,     7,     5,     1,     3,     5,
     7,     5,     6,     9,     8,     8,     7,     8,     7,     7,
     6,     7,     7,     1,     1,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     2,     2,     1,     5,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     2,     2,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     4,     3,     6,     3,     3,     1,     3,     1,
     1,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     1,     1,     1,     3,     5,     6,     8,     2,     5,
     2,     3,     5,     4,     6,     6,     4,     6,     0,     1,
     3,     1,     3,     0,     1,     1,     2,     4,     5,     4,
     7,     8,     1,     3
};

static const short yydefact[] = {     2,
     1,     0,     0,     0,   107,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   106,    87,
   112,   110,    25,   111,   104,   105,     0,     0,     0,     0,
     0,     3,     6,     4,     5,    16,   134,    17,    12,    13,
    14,    15,     0,     0,   108,   109,    75,   132,   133,     0,
   118,     0,     0,     0,    18,    19,     0,   107,    87,    20,
     0,    75,     0,    10,    52,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   121,   120,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   139,
   149,     0,    85,    86,     0,   103,   102,    22,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   141,    28,     0,     0,    41,    41,
     0,    21,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   135,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   163,     0,     0,
   152,     0,   150,     0,    76,    81,    82,    83,    84,    89,
    90,   114,    80,    79,    78,    77,   101,   116,   117,    96,
    97,    93,    94,    91,    92,    98,    95,    99,     0,   100,
     0,   142,    30,     0,    29,     0,   119,    41,    39,    42,
    39,     0,     0,    51,    11,     0,     0,     0,     0,     0,
     0,    39,     0,     0,     0,     8,   147,     0,     0,    23,
     0,     0,   113,     0,   144,     0,   149,   149,     0,     0,
     0,     0,     0,    28,     0,     0,    43,    43,    60,    62,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     9,     0,     0,   136,   164,     0,   140,   151,
   153,     0,     0,     0,    88,   143,    10,    31,     0,    39,
    40,     0,     0,     0,     0,    63,    71,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     7,
   148,    24,     0,   137,   145,   146,   115,     0,     0,    43,
    44,    34,    38,    61,    70,    69,     0,    67,     0,     0,
     0,    72,    73,   154,     0,    58,    53,    54,     0,    26,
    10,     0,    45,    45,    68,    66,    65,     0,     0,     0,
     0,     0,   155,   156,     0,    10,   138,     0,    36,     0,
     0,    47,    46,     0,    64,     0,     0,     0,     0,     0,
   157,    59,    55,    27,    45,    49,    33,     0,    48,    37,
     0,     0,     0,     0,     0,    32,     0,    57,     0,    50,
   160,   158,     0,     0,     0,    10,    35,     0,   159,     0,
    56,     0,     0,   161,     0,   162,     0,     0,     0
};

static const short yydefgoto[] = {   387,
     1,    32,    33,   215,   134,    65,    35,   194,   195,    36,
    37,   237,   199,   273,   341,   342,    66,    38,   288,   315,
    39,    40,    41,    42,    43,    44,    45,    46,    53,    90,
    62,    48,    49,   162,   163,   332,   343,   334,   159
};

static const short yypact[] = {-32768,
   132,    -8,    -9,    -9,   -28,   -22,   -12,   226,     3,   537,
    35,    42,    43,    -9,    69,    70,    67,    73,-32768,    80,
   457,   -37,-32768,-32768,-32768,-32768,  1186,  1186,  1186,  1186,
  1186,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    77,  2649,  2902,-32768,    83,-32768,-32768,   -16,
-32768,  1186,    89,    93,-32768,-32768,  1186,-32768,-32768,-32768,
  1299,-32768,  1186,-32768,-32768,   118,   403,   112,   114,   100,
  1186,  1186,   -11,  1186,  1186,   579,-32768,-32768,  1186,  1186,
  1186,  1186,  1186,  1186,  1186,  1186,  1186,  1186,  1186,-32768,
   808,   120,   125,   125,  1353,   125,   125,-32768,  1186,  1186,
  1186,  1186,  1186,  1186,   122,  1186,  1186,  1186,  1186,  1186,
    -9,    -9,  1186,  1186,  1186,  1186,  1186,  1186,  1186,  1186,
  1186,  1186,  1186,   850,-32768,   126,   124,  1407,    28,  1186,
  1461,-32768,  1515,   649,   116,   892,  1569,   156,   158,  1186,
  1623,  1677,   179,  1191,  1245,  1186,  2649,  2649,  2649,  2649,
  2649,  2649,  2649,  2649,  2649,  2649,  2649,  2649,   -44,  1186,
  2649,   127,   131,   134,-32768,   139,   139,   125,   125,   406,
   406,   -36,  2790,  2848,   125,  2819,    55,-32768,-32768,   249,
   249,  2877,  2877,   406,   406,  2761,  2732,    55,  1731,    55,
  1186,  2649,-32768,   138,   140,   145,-32768,  1186,   146,  2649,
   146,   537,   537,-32768,-32768,  1186,   934,  1785,   976,  1186,
  1186,  1839,   143,   150,    11,-32768,-32768,   171,  1186,-32768,
   -19,  1186,  2918,    47,-32768,  1186,   808,   808,  1186,  1186,
    50,   154,   181,   126,   121,   187,   162,   162,   222,-32768,
  1893,   537,  1947,  1018,  1060,  2001,  2055,  2109,   180,   209,
   209,   190,-32768,   194,  2163,-32768,  2649,  1102,-32768,-32768,
  2649,   195,   196,   -32,  2703,-32768,-32768,-32768,   197,   146,
-32768,  1186,   198,   199,   537,-32768,-32768,   537,   537,  2217,
   537,  2271,  1144,   537,   537,   186,  1186,   212,   214,-32768,
-32768,-32768,  1186,  2649,-32768,-32768,-32768,   694,   200,   162,
   131,   210,   216,-32768,-32768,-32768,   537,-32768,   537,   537,
  2325,-32768,-32768,    12,     4,  2649,-32768,-32768,    58,-32768,
-32768,   203,   160,   160,-32768,-32768,-32768,   537,   206,   -24,
   241,   221,    12,-32768,  1186,-32768,-32768,   739,   227,   229,
   225,    18,   160,   231,-32768,  1186,  1186,  1186,    -6,   240,
-32768,  2649,   202,-32768,   160,-32768,-32768,   242,    18,-32768,
  2379,  2433,   -10,  1186,  1186,-32768,   244,-32768,   243,-32768,
-32768,-32768,   255,  2487,    -5,-32768,-32768,  1186,-32768,   257,
   784,  2541,  1186,-32768,  2595,-32768,   317,   318,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,  -260,     0,  -135,    85,-32768,-32768,
  -302,  -185,  -119,  -223,  -296,   -23,  -197,-32768,  -239,-32768,
-32768,-32768,-32768,-32768,-32768,   283,-32768,-32768,     6,   -43,
    -1,-32768,-32768,  -132,  -143,-32768,     7,  -240,  -225
};


#define	YYLAST		3000


static const short yytable[] = {    47,
    34,   125,   221,   264,   239,   240,   298,   216,    47,    54,
   201,   289,   222,     2,   274,   238,   224,    91,   228,    70,
   340,   340,     3,     4,   222,   347,   249,   344,    51,    50,
    55,   335,     3,     4,    58,   329,    56,   226,   126,   358,
   340,   256,    57,   364,   277,    52,   222,   231,   143,   330,
   331,   222,   340,    92,   223,   229,   358,    63,   369,    18,
   338,   336,    19,    59,    21,    22,   297,   348,    24,    25,
    26,   252,    27,    28,   127,   353,   322,   304,   235,   253,
   305,   306,    29,   308,   300,   365,   312,   313,   373,    67,
    30,    31,   351,   380,   262,   263,    68,    69,    99,   100,
   101,   102,   351,   226,    73,   105,   226,   260,   108,   325,
   266,   326,   327,   368,   226,   381,   178,   179,   337,   198,
   111,   112,   363,    71,    72,   113,   114,    74,   301,    75,
   345,   135,    47,   205,     2,    98,     3,     4,     5,   375,
     6,   -74,     7,   129,     8,     9,    10,   130,   138,   319,
   139,    11,    12,    13,   140,    14,    15,   164,    16,   172,
    17,   196,   193,    18,     3,     4,    19,    20,    21,    22,
   206,    23,    24,    25,    26,   105,    27,    28,   210,   259,
   211,     2,   225,   329,   101,   102,    29,   226,   227,   105,
   111,   112,   108,   232,    30,    31,   233,   330,   331,   234,
    47,    47,   250,   236,   111,   112,     3,     4,     5,   251,
     6,   254,     7,   267,     8,     9,    10,   268,   272,   270,
   367,    11,    12,    13,   271,    14,    15,   287,    16,   275,
     3,     4,    58,    18,   287,   286,    19,    20,    21,    22,
    47,    23,    24,    25,    26,   314,    27,    28,   290,   291,
   295,   296,   299,   302,   303,   346,    29,    18,   339,   321,
    19,    59,    21,    22,    30,    31,    24,    25,    26,   323,
    27,    28,   317,    47,   318,   324,    47,    47,   349,    47,
    29,   350,    47,    47,    60,   357,   355,   356,    30,    31,
    61,   360,    99,   100,   101,   102,    47,   205,   366,   105,
   370,   376,   108,   377,   378,    47,   383,    47,    47,    93,
    94,    95,    96,    97,   111,   112,   388,   389,   269,   359,
   333,     0,     0,     0,     0,     0,    47,     0,     0,     0,
     0,     0,     0,     0,   128,     0,    47,   205,     0,   131,
     0,     0,     0,     0,     0,   133,     0,     0,     0,   137,
     0,    47,   205,   141,   142,     0,   144,   145,   147,     0,
     0,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,     0,   161,     0,     0,     0,     0,     0,    47,
   205,   166,   167,   168,   169,   170,   171,     0,   173,   174,
   175,   176,   177,     0,     0,   180,   181,   182,   183,   184,
   185,   186,   187,   188,   189,   190,   192,     3,     4,    58,
     0,   200,   200,     0,     0,     0,     0,     0,   208,     0,
     0,     0,   212,     0,     0,     0,     0,     0,   161,     0,
     0,     0,     0,     0,    18,     0,     0,    19,    59,    21,
    22,     0,   161,    24,    25,    26,     0,    27,    28,    99,
   100,   101,   102,     0,     0,     0,   105,    29,     0,   108,
     0,   136,     0,     0,     0,    30,    31,     0,     0,     0,
   110,   111,   112,   161,     0,     0,   113,   114,     0,     0,
   200,     0,     0,     0,     0,     0,     0,     0,   241,   243,
     0,   246,   247,   248,     0,   121,     0,     0,     0,     0,
     0,   255,   123,     0,   257,     0,    76,     0,   261,   161,
   161,   158,   265,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    77,    78,   280,   282,     0,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,     0,
   294,     3,     4,     5,     0,     6,     0,     7,    89,     8,
     9,    10,     0,     0,   161,     0,    11,    12,    13,     0,
    14,    15,     0,    16,     0,   311,     0,     0,    18,   316,
     0,    19,    20,    21,    22,   161,    23,    24,    25,    26,
     0,    27,    28,     3,     4,    58,     0,     0,     0,     0,
     0,    29,     0,     0,     0,     0,    64,     0,     0,    30,
    31,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    18,     0,     0,    19,    59,    21,    22,   352,     0,    24,
    25,    26,     0,    27,    28,     0,     0,     0,   361,   362,
   158,     0,     0,    29,     0,     0,     0,     0,   146,     0,
     0,    30,    31,     0,     0,     0,   374,   158,     0,     0,
     0,     0,     0,     3,     4,     5,     0,     6,     0,     7,
   382,     8,     9,    10,     0,   385,     0,     0,    11,    12,
    13,     0,    14,    15,     0,    16,     0,     0,     0,     0,
    18,     0,     0,    19,    20,    21,    22,     0,    23,    24,
    25,    26,     0,    27,    28,     0,     0,     0,     3,     4,
     5,     0,     6,    29,     7,     0,     8,     9,    10,   204,
     0,    30,    31,    11,    12,    13,     0,    14,    15,     0,
    16,     0,     0,     0,     0,    18,     0,     0,    19,    20,
    21,    22,     0,    23,    24,    25,    26,     0,    27,    28,
     0,     0,     0,     3,     4,     5,     0,     6,    29,     7,
     0,     8,     9,    10,   320,     0,    30,    31,    11,    12,
    13,     0,    14,    15,     0,    16,     0,     0,     0,     0,
    18,     0,     0,    19,    20,    21,    22,     0,    23,    24,
    25,    26,     0,    27,    28,     0,     0,     0,     3,     4,
     5,     0,     6,    29,     7,     0,     8,     9,    10,   354,
     0,    30,    31,    11,    12,    13,     0,    14,    15,     0,
    16,     0,     3,     4,    58,    18,     0,     0,    19,    20,
    21,    22,     0,    23,    24,    25,    26,     0,    27,    28,
     0,     0,     0,     0,     0,     0,     0,     0,    29,    18,
     0,     0,    19,    59,    21,    22,    30,    31,    24,    25,
    26,     0,    27,    28,     3,     4,    58,     0,     0,     0,
     0,     0,    29,     0,     0,     0,     0,   160,     0,     0,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    18,     0,     0,    19,    59,    21,    22,     0,     0,
    24,    25,    26,     0,    27,    28,     3,     4,    58,     0,
     0,     0,     0,     0,    29,     0,     0,     0,     0,   191,
     0,     0,    30,    31,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    18,     0,     0,    19,    59,    21,    22,
     0,     0,    24,    25,    26,     0,    27,    28,     3,     4,
    58,     0,     0,     0,     0,     0,    29,     0,     0,     0,
   207,     0,     0,     0,    30,    31,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    18,     0,     0,    19,    59,
    21,    22,     0,     0,    24,    25,    26,     0,    27,    28,
     3,     4,    58,     0,     0,     0,     0,     0,    29,   242,
     0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    18,     0,     0,
    19,    59,    21,    22,     0,     0,    24,    25,    26,     0,
    27,    28,     3,     4,    58,     0,     0,     0,     0,     0,
    29,     0,     0,     0,   245,     0,     0,     0,    30,    31,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    18,
     0,     0,    19,    59,    21,    22,     0,     0,    24,    25,
    26,     0,    27,    28,     3,     4,    58,     0,     0,     0,
     0,     0,    29,   279,     0,     0,     0,     0,     0,     0,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    18,     0,     0,    19,    59,    21,    22,     0,     0,
    24,    25,    26,     0,    27,    28,     3,     4,    58,     0,
     0,     0,     0,     0,    29,   281,     0,     0,     0,     0,
     0,     0,    30,    31,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    18,     0,     0,    19,    59,    21,    22,
     0,     0,    24,    25,    26,     0,    27,    28,     3,     4,
    58,     0,     0,     0,     0,     0,    29,     0,     0,     0,
     0,   293,     0,     0,    30,    31,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    18,     0,     0,    19,    59,
    21,    22,     0,     0,    24,    25,    26,     0,    27,    28,
     3,     4,    58,     0,     0,     0,     0,     0,    29,   310,
     0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    18,     0,     0,
    19,    59,    21,    22,     0,     0,    24,    25,    26,     0,
    27,    28,     0,     0,    99,   100,   101,   102,   103,   104,
    29,   105,   106,   107,   108,     0,   217,   218,    30,    31,
     0,     0,   109,     0,     0,   110,   111,   112,     0,     0,
     0,   113,   114,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   115,   116,   117,   118,   119,   120,
   121,     0,     0,     0,     0,     0,   122,   123,    99,   100,
   101,   102,   103,   104,     0,   105,   106,   107,   108,     0,
     0,   219,     0,   220,     0,     0,   109,     0,     0,   110,
   111,   112,     0,     0,     0,   113,   114,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   115,   116,
   117,   118,   119,   120,   121,     0,     0,     0,     0,     0,
   122,   123,    99,   100,   101,   102,   103,   104,     0,   105,
   106,   107,   108,     0,     0,     0,     0,   132,     0,     0,
   109,     0,     0,   110,   111,   112,     0,     0,     0,   113,
   114,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   115,   116,   117,   118,   119,   120,   121,     0,
     0,     0,     0,     0,   122,   123,    99,   100,   101,   102,
   103,   104,     0,   105,   106,   107,   108,     0,   165,     0,
     0,     0,     0,     0,   109,     0,     0,   110,   111,   112,
     0,     0,     0,   113,   114,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   115,   116,   117,   118,
   119,   120,   121,     0,     0,     0,     0,     0,   122,   123,
    99,   100,   101,   102,   103,   104,     0,   105,   106,   107,
   108,     0,   197,     0,     0,     0,     0,     0,   109,     0,
     0,   110,   111,   112,     0,     0,     0,   113,   114,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   115,   116,   117,   118,   119,   120,   121,     0,     0,     0,
     0,     0,   122,   123,    99,   100,   101,   102,   103,   104,
     0,   105,   106,   107,   108,     0,   202,     0,     0,     0,
     0,     0,   109,     0,     0,   110,   111,   112,     0,     0,
     0,   113,   114,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   115,   116,   117,   118,   119,   120,
   121,     0,     0,     0,     0,     0,   122,   123,    99,   100,
   101,   102,   103,   104,     0,   105,   106,   107,   108,     0,
   203,     0,     0,     0,     0,     0,   109,     0,     0,   110,
   111,   112,     0,     0,     0,   113,   114,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   115,   116,
   117,   118,   119,   120,   121,     0,     0,     0,     0,     0,
   122,   123,    99,   100,   101,   102,   103,   104,     0,   105,
   106,   107,   108,     0,     0,     0,     0,   209,     0,     0,
   109,     0,     0,   110,   111,   112,     0,     0,     0,   113,
   114,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   115,   116,   117,   118,   119,   120,   121,     0,
     0,     0,     0,     0,   122,   123,    99,   100,   101,   102,
   103,   104,     0,   105,   106,   107,   108,     0,   213,     0,
     0,     0,     0,     0,   109,     0,     0,   110,   111,   112,
     0,     0,     0,   113,   114,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   115,   116,   117,   118,
   119,   120,   121,     0,     0,     0,     0,     0,   122,   123,
    99,   100,   101,   102,   103,   104,     0,   105,   106,   107,
   108,     0,   214,     0,     0,     0,     0,     0,   109,     0,
     0,   110,   111,   112,     0,     0,     0,   113,   114,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   115,   116,   117,   118,   119,   120,   121,     0,     0,     0,
     0,     0,   122,   123,    99,   100,   101,   102,   103,   104,
     0,   105,   106,   107,   108,     0,     0,     0,   230,     0,
     0,     0,   109,     0,     0,   110,   111,   112,     0,     0,
     0,   113,   114,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   115,   116,   117,   118,   119,   120,
   121,     0,     0,     0,     0,     0,   122,   123,    99,   100,
   101,   102,   103,   104,     0,   105,   106,   107,   108,     0,
     0,     0,     0,   244,     0,     0,   109,     0,     0,   110,
   111,   112,     0,     0,     0,   113,   114,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   115,   116,
   117,   118,   119,   120,   121,     0,     0,     0,     0,     0,
   122,   123,    99,   100,   101,   102,   103,   104,     0,   105,
   106,   107,   108,     0,     0,     0,   236,     0,     0,     0,
   109,     0,     0,   110,   111,   112,     0,     0,     0,   113,
   114,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   115,   116,   117,   118,   119,   120,   121,     0,
     0,     0,     0,     0,   122,   123,    99,   100,   101,   102,
   103,   104,     0,   105,   106,   107,   108,     0,   276,     0,
     0,     0,     0,     0,   109,     0,     0,   110,   111,   112,
     0,     0,     0,   113,   114,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   115,   116,   117,   118,
   119,   120,   121,     0,     0,     0,     0,     0,   122,   123,
    99,   100,   101,   102,   103,   104,     0,   105,   106,   107,
   108,     0,   278,     0,     0,     0,     0,     0,   109,     0,
     0,   110,   111,   112,     0,     0,     0,   113,   114,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   115,   116,   117,   118,   119,   120,   121,     0,     0,     0,
     0,     0,   122,   123,    99,   100,   101,   102,   103,   104,
     0,   105,   106,   107,   108,     0,     0,     0,     0,   283,
     0,     0,   109,     0,     0,   110,   111,   112,     0,     0,
     0,   113,   114,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   115,   116,   117,   118,   119,   120,
   121,     0,     0,     0,     0,     0,   122,   123,    99,   100,
   101,   102,   103,   104,     0,   105,   106,   107,   108,     0,
   284,     0,     0,     0,     0,     0,   109,     0,     0,   110,
   111,   112,     0,     0,     0,   113,   114,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   115,   116,
   117,   118,   119,   120,   121,     0,     0,     0,     0,     0,
   122,   123,    99,   100,   101,   102,   103,   104,     0,   105,
   106,   107,   108,     0,   285,     0,     0,     0,     0,     0,
   109,     0,     0,   110,   111,   112,     0,     0,     0,   113,
   114,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   115,   116,   117,   118,   119,   120,   121,     0,
     0,     0,     0,     0,   122,   123,    99,   100,   101,   102,
   103,   104,     0,   105,   106,   107,   108,     0,     0,     0,
     0,   292,     0,     0,   109,     0,     0,   110,   111,   112,
     0,     0,     0,   113,   114,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   115,   116,   117,   118,
   119,   120,   121,     0,     0,     0,     0,     0,   122,   123,
    99,   100,   101,   102,   103,   104,     0,   105,   106,   107,
   108,     0,   307,     0,     0,     0,     0,     0,   109,     0,
     0,   110,   111,   112,     0,     0,     0,   113,   114,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   115,   116,   117,   118,   119,   120,   121,     0,     0,     0,
     0,     0,   122,   123,    99,   100,   101,   102,   103,   104,
     0,   105,   106,   107,   108,     0,   309,     0,     0,     0,
     0,     0,   109,     0,     0,   110,   111,   112,     0,     0,
     0,   113,   114,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   115,   116,   117,   118,   119,   120,
   121,     0,     0,     0,     0,     0,   122,   123,    99,   100,
   101,   102,   103,   104,     0,   105,   106,   107,   108,     0,
   328,     0,     0,     0,     0,     0,   109,     0,     0,   110,
   111,   112,     0,     0,     0,   113,   114,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   115,   116,
   117,   118,   119,   120,   121,     0,     0,     0,     0,     0,
   122,   123,    99,   100,   101,   102,   103,   104,     0,   105,
   106,   107,   108,     0,     0,     0,     0,   371,     0,     0,
   109,     0,     0,   110,   111,   112,     0,     0,     0,   113,
   114,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   115,   116,   117,   118,   119,   120,   121,     0,
     0,     0,     0,     0,   122,   123,    99,   100,   101,   102,
   103,   104,     0,   105,   106,   107,   108,     0,     0,     0,
     0,   372,     0,     0,   109,     0,     0,   110,   111,   112,
     0,     0,     0,   113,   114,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   115,   116,   117,   118,
   119,   120,   121,     0,     0,     0,     0,     0,   122,   123,
    99,   100,   101,   102,   103,   104,     0,   105,   106,   107,
   108,     0,     0,     0,     0,   379,     0,     0,   109,     0,
     0,   110,   111,   112,     0,     0,     0,   113,   114,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   115,   116,   117,   118,   119,   120,   121,     0,     0,     0,
     0,     0,   122,   123,    99,   100,   101,   102,   103,   104,
     0,   105,   106,   107,   108,     0,     0,     0,     0,   384,
     0,     0,   109,     0,     0,   110,   111,   112,     0,     0,
     0,   113,   114,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   115,   116,   117,   118,   119,   120,
   121,     0,     0,     0,     0,     0,   122,   123,    99,   100,
   101,   102,   103,   104,     0,   105,   106,   107,   108,     0,
     0,     0,     0,   386,     0,     0,   109,     0,     0,   110,
   111,   112,     0,     0,     0,   113,   114,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   115,   116,
   117,   118,   119,   120,   121,     0,     0,     0,     0,     0,
   122,   123,    99,   100,   101,   102,   103,   104,     0,   105,
   106,   107,   108,     0,     0,     0,     0,     0,     0,     0,
   109,     0,     0,   110,   111,   112,     0,     0,     0,   113,
   114,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   115,   116,   117,   118,   119,   120,   121,     0,
     0,     0,     0,     0,   122,   123,    99,   100,   101,   102,
   103,   104,     0,   105,   106,   107,   108,     0,     0,     0,
     0,     0,     0,     0,   109,     0,     0,   110,   111,   112,
     0,     0,     0,   113,   114,    99,   100,   101,   102,   103,
   104,     0,   105,   106,   107,   108,   115,   116,   117,   118,
   119,   120,   121,   109,     0,     0,   110,   111,   112,   123,
     0,     0,   113,   114,    99,   100,   101,   102,   103,   104,
     0,   105,   106,   107,   108,   115,   116,   117,   118,   119,
     0,   121,   109,     0,     0,   110,   111,   112,   123,     0,
     0,   113,   114,    99,   100,   101,   102,   103,   104,     0,
   105,     0,   107,   108,   115,   116,   117,   118,     0,     0,
   121,   109,     0,     0,   110,   111,   112,   123,     0,     0,
   113,   114,    99,   100,   101,   102,   103,   104,     0,   105,
     0,   107,   108,   115,   116,   117,   118,     0,     0,   121,
     0,     0,     0,   110,   111,   112,   123,     0,     0,   113,
   114,    99,   100,   101,   102,   103,   104,     0,   105,     0,
     0,   108,   115,   116,   117,   118,     0,     0,   121,     0,
     0,     0,   110,   111,   112,   123,     0,     0,   113,   114,
    99,   100,   101,   102,   103,   104,     0,   105,     0,     0,
   108,   115,   116,   117,   118,     0,     0,   121,     0,     0,
     0,   110,   111,   112,   123,     0,     0,   113,   114,     0,
     0,   124,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   117,   118,     0,     0,   121,   258,     0,    77,
    78,     0,     0,   123,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,     0,    77,    78,     0,     0,     0,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88
};

static const short yycheck[] = {     1,
     1,    45,   146,   229,   202,   203,   267,   143,    10,     4,
   130,   251,    57,     3,   238,   201,   160,    55,    55,    14,
   323,   324,     5,     6,    57,    50,   212,   324,    38,    38,
    59,    28,     5,     6,     7,    24,    59,    57,    55,   342,
   343,    61,    55,    50,   242,    55,    57,   191,    60,    38,
    39,    57,   355,    91,    99,    92,   359,    55,   355,    32,
   321,    58,    35,    36,    37,    38,    99,    92,    41,    42,
    43,    61,    45,    46,    91,   336,   300,   275,   198,   215,
   278,   279,    55,   281,   270,    92,   284,   285,    99,    55,
    63,    64,   333,    99,   227,   228,    55,    55,    44,    45,
    46,    47,   343,    57,    38,    51,    57,    61,    54,   307,
    61,   309,   310,   353,    57,   376,   111,   112,    61,    92,
    66,    67,   348,    55,    55,    71,    72,    55,   272,    50,
   328,    14,   134,   134,     3,    59,     5,     6,     7,   365,
     9,    59,    11,    55,    13,    14,    15,    55,    37,   293,
    37,    20,    21,    22,    55,    24,    25,    38,    27,    38,
    29,    38,    37,    32,     5,     6,    35,    36,    37,    38,
    55,    40,    41,    42,    43,    51,    45,    46,    23,   223,
    23,     3,    56,    24,    46,    47,    55,    57,    55,    51,
    66,    67,    54,    56,    63,    64,    57,    38,    39,    55,
   202,   203,    60,    58,    66,    67,     5,     6,     7,    60,
     9,    41,    11,    60,    13,    14,    15,    37,    57,    99,
    19,    20,    21,    22,    38,    24,    25,    26,    27,     8,
     5,     6,     7,    32,    26,    56,    35,    36,    37,    38,
   242,    40,    41,    42,    43,    60,    45,    46,    59,    56,
    56,    56,    56,    56,    56,    50,    55,    32,    56,    60,
    35,    36,    37,    38,    63,    64,    41,    42,    43,    60,
    45,    46,    61,   275,    61,    60,   278,   279,    38,   281,
    55,    61,   284,   285,    59,    61,    60,    59,    63,    64,
     8,    61,    44,    45,    46,    47,   298,   298,    59,    51,
    59,    58,    54,    61,    50,   307,    50,   309,   310,    27,
    28,    29,    30,    31,    66,    67,     0,     0,   234,   343,
   314,    -1,    -1,    -1,    -1,    -1,   328,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    52,    -1,   338,   338,    -1,    57,
    -1,    -1,    -1,    -1,    -1,    63,    -1,    -1,    -1,    67,
    -1,   353,   353,    71,    72,    -1,    74,    75,    76,    -1,
    -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    -1,    91,    -1,    -1,    -1,    -1,    -1,   381,
   381,    99,   100,   101,   102,   103,   104,    -1,   106,   107,
   108,   109,   110,    -1,    -1,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,     5,     6,     7,
    -1,   129,   130,    -1,    -1,    -1,    -1,    -1,   136,    -1,
    -1,    -1,   140,    -1,    -1,    -1,    -1,    -1,   146,    -1,
    -1,    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    37,
    38,    -1,   160,    41,    42,    43,    -1,    45,    46,    44,
    45,    46,    47,    -1,    -1,    -1,    51,    55,    -1,    54,
    -1,    59,    -1,    -1,    -1,    63,    64,    -1,    -1,    -1,
    65,    66,    67,   191,    -1,    -1,    71,    72,    -1,    -1,
   198,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   206,   207,
    -1,   209,   210,   211,    -1,    90,    -1,    -1,    -1,    -1,
    -1,   219,    97,    -1,   222,    -1,    50,    -1,   226,   227,
   228,   229,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    68,    69,   244,   245,    -1,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    -1,
   258,     5,     6,     7,    -1,     9,    -1,    11,    92,    13,
    14,    15,    -1,    -1,   272,    -1,    20,    21,    22,    -1,
    24,    25,    -1,    27,    -1,   283,    -1,    -1,    32,   287,
    -1,    35,    36,    37,    38,   293,    40,    41,    42,    43,
    -1,    45,    46,     5,     6,     7,    -1,    -1,    -1,    -1,
    -1,    55,    -1,    -1,    -1,    -1,    60,    -1,    -1,    63,
    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    32,    -1,    -1,    35,    36,    37,    38,   335,    -1,    41,
    42,    43,    -1,    45,    46,    -1,    -1,    -1,   346,   347,
   348,    -1,    -1,    55,    -1,    -1,    -1,    -1,    60,    -1,
    -1,    63,    64,    -1,    -1,    -1,   364,   365,    -1,    -1,
    -1,    -1,    -1,     5,     6,     7,    -1,     9,    -1,    11,
   378,    13,    14,    15,    -1,   383,    -1,    -1,    20,    21,
    22,    -1,    24,    25,    -1,    27,    -1,    -1,    -1,    -1,
    32,    -1,    -1,    35,    36,    37,    38,    -1,    40,    41,
    42,    43,    -1,    45,    46,    -1,    -1,    -1,     5,     6,
     7,    -1,     9,    55,    11,    -1,    13,    14,    15,    61,
    -1,    63,    64,    20,    21,    22,    -1,    24,    25,    -1,
    27,    -1,    -1,    -1,    -1,    32,    -1,    -1,    35,    36,
    37,    38,    -1,    40,    41,    42,    43,    -1,    45,    46,
    -1,    -1,    -1,     5,     6,     7,    -1,     9,    55,    11,
    -1,    13,    14,    15,    61,    -1,    63,    64,    20,    21,
    22,    -1,    24,    25,    -1,    27,    -1,    -1,    -1,    -1,
    32,    -1,    -1,    35,    36,    37,    38,    -1,    40,    41,
    42,    43,    -1,    45,    46,    -1,    -1,    -1,     5,     6,
     7,    -1,     9,    55,    11,    -1,    13,    14,    15,    61,
    -1,    63,    64,    20,    21,    22,    -1,    24,    25,    -1,
    27,    -1,     5,     6,     7,    32,    -1,    -1,    35,    36,
    37,    38,    -1,    40,    41,    42,    43,    -1,    45,    46,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    55,    32,
    -1,    -1,    35,    36,    37,    38,    63,    64,    41,    42,
    43,    -1,    45,    46,     5,     6,     7,    -1,    -1,    -1,
    -1,    -1,    55,    -1,    -1,    -1,    -1,    60,    -1,    -1,
    63,    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    32,    -1,    -1,    35,    36,    37,    38,    -1,    -1,
    41,    42,    43,    -1,    45,    46,     5,     6,     7,    -1,
    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    60,
    -1,    -1,    63,    64,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    37,    38,
    -1,    -1,    41,    42,    43,    -1,    45,    46,     5,     6,
     7,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,
    59,    -1,    -1,    -1,    63,    64,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,    35,    36,
    37,    38,    -1,    -1,    41,    42,    43,    -1,    45,    46,
     5,     6,     7,    -1,    -1,    -1,    -1,    -1,    55,    56,
    -1,    -1,    -1,    -1,    -1,    -1,    63,    64,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,
    35,    36,    37,    38,    -1,    -1,    41,    42,    43,    -1,
    45,    46,     5,     6,     7,    -1,    -1,    -1,    -1,    -1,
    55,    -1,    -1,    -1,    59,    -1,    -1,    -1,    63,    64,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,
    -1,    -1,    35,    36,    37,    38,    -1,    -1,    41,    42,
    43,    -1,    45,    46,     5,     6,     7,    -1,    -1,    -1,
    -1,    -1,    55,    56,    -1,    -1,    -1,    -1,    -1,    -1,
    63,    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    32,    -1,    -1,    35,    36,    37,    38,    -1,    -1,
    41,    42,    43,    -1,    45,    46,     5,     6,     7,    -1,
    -1,    -1,    -1,    -1,    55,    56,    -1,    -1,    -1,    -1,
    -1,    -1,    63,    64,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    37,    38,
    -1,    -1,    41,    42,    43,    -1,    45,    46,     5,     6,
     7,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,
    -1,    60,    -1,    -1,    63,    64,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,    35,    36,
    37,    38,    -1,    -1,    41,    42,    43,    -1,    45,    46,
     5,     6,     7,    -1,    -1,    -1,    -1,    -1,    55,    56,
    -1,    -1,    -1,    -1,    -1,    -1,    63,    64,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,
    35,    36,    37,    38,    -1,    -1,    41,    42,    43,    -1,
    45,    46,    -1,    -1,    44,    45,    46,    47,    48,    49,
    55,    51,    52,    53,    54,    -1,    56,    57,    63,    64,
    -1,    -1,    62,    -1,    -1,    65,    66,    67,    -1,    -1,
    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    84,    85,    86,    87,    88,    89,
    90,    -1,    -1,    -1,    -1,    -1,    96,    97,    44,    45,
    46,    47,    48,    49,    -1,    51,    52,    53,    54,    -1,
    -1,    57,    -1,    59,    -1,    -1,    62,    -1,    -1,    65,
    66,    67,    -1,    -1,    -1,    71,    72,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,
    86,    87,    88,    89,    90,    -1,    -1,    -1,    -1,    -1,
    96,    97,    44,    45,    46,    47,    48,    49,    -1,    51,
    52,    53,    54,    -1,    -1,    -1,    -1,    59,    -1,    -1,
    62,    -1,    -1,    65,    66,    67,    -1,    -1,    -1,    71,
    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    84,    85,    86,    87,    88,    89,    90,    -1,
    -1,    -1,    -1,    -1,    96,    97,    44,    45,    46,    47,
    48,    49,    -1,    51,    52,    53,    54,    -1,    56,    -1,
    -1,    -1,    -1,    -1,    62,    -1,    -1,    65,    66,    67,
    -1,    -1,    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
    88,    89,    90,    -1,    -1,    -1,    -1,    -1,    96,    97,
    44,    45,    46,    47,    48,    49,    -1,    51,    52,    53,
    54,    -1,    56,    -1,    -1,    -1,    -1,    -1,    62,    -1,
    -1,    65,    66,    67,    -1,    -1,    -1,    71,    72,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    84,    85,    86,    87,    88,    89,    90,    -1,    -1,    -1,
    -1,    -1,    96,    97,    44,    45,    46,    47,    48,    49,
    -1,    51,    52,    53,    54,    -1,    56,    -1,    -1,    -1,
    -1,    -1,    62,    -1,    -1,    65,    66,    67,    -1,    -1,
    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    84,    85,    86,    87,    88,    89,
    90,    -1,    -1,    -1,    -1,    -1,    96,    97,    44,    45,
    46,    47,    48,    49,    -1,    51,    52,    53,    54,    -1,
    56,    -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,    65,
    66,    67,    -1,    -1,    -1,    71,    72,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,
    86,    87,    88,    89,    90,    -1,    -1,    -1,    -1,    -1,
    96,    97,    44,    45,    46,    47,    48,    49,    -1,    51,
    52,    53,    54,    -1,    -1,    -1,    -1,    59,    -1,    -1,
    62,    -1,    -1,    65,    66,    67,    -1,    -1,    -1,    71,
    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    84,    85,    86,    87,    88,    89,    90,    -1,
    -1,    -1,    -1,    -1,    96,    97,    44,    45,    46,    47,
    48,    49,    -1,    51,    52,    53,    54,    -1,    56,    -1,
    -1,    -1,    -1,    -1,    62,    -1,    -1,    65,    66,    67,
    -1,    -1,    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
    88,    89,    90,    -1,    -1,    -1,    -1,    -1,    96,    97,
    44,    45,    46,    47,    48,    49,    -1,    51,    52,    53,
    54,    -1,    56,    -1,    -1,    -1,    -1,    -1,    62,    -1,
    -1,    65,    66,    67,    -1,    -1,    -1,    71,    72,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    84,    85,    86,    87,    88,    89,    90,    -1,    -1,    -1,
    -1,    -1,    96,    97,    44,    45,    46,    47,    48,    49,
    -1,    51,    52,    53,    54,    -1,    -1,    -1,    58,    -1,
    -1,    -1,    62,    -1,    -1,    65,    66,    67,    -1,    -1,
    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    84,    85,    86,    87,    88,    89,
    90,    -1,    -1,    -1,    -1,    -1,    96,    97,    44,    45,
    46,    47,    48,    49,    -1,    51,    52,    53,    54,    -1,
    -1,    -1,    -1,    59,    -1,    -1,    62,    -1,    -1,    65,
    66,    67,    -1,    -1,    -1,    71,    72,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,
    86,    87,    88,    89,    90,    -1,    -1,    -1,    -1,    -1,
    96,    97,    44,    45,    46,    47,    48,    49,    -1,    51,
    52,    53,    54,    -1,    -1,    -1,    58,    -1,    -1,    -1,
    62,    -1,    -1,    65,    66,    67,    -1,    -1,    -1,    71,
    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    84,    85,    86,    87,    88,    89,    90,    -1,
    -1,    -1,    -1,    -1,    96,    97,    44,    45,    46,    47,
    48,    49,    -1,    51,    52,    53,    54,    -1,    56,    -1,
    -1,    -1,    -1,    -1,    62,    -1,    -1,    65,    66,    67,
    -1,    -1,    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
    88,    89,    90,    -1,    -1,    -1,    -1,    -1,    96,    97,
    44,    45,    46,    47,    48,    49,    -1,    51,    52,    53,
    54,    -1,    56,    -1,    -1,    -1,    -1,    -1,    62,    -1,
    -1,    65,    66,    67,    -1,    -1,    -1,    71,    72,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    84,    85,    86,    87,    88,    89,    90,    -1,    -1,    -1,
    -1,    -1,    96,    97,    44,    45,    46,    47,    48,    49,
    -1,    51,    52,    53,    54,    -1,    -1,    -1,    -1,    59,
    -1,    -1,    62,    -1,    -1,    65,    66,    67,    -1,    -1,
    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    84,    85,    86,    87,    88,    89,
    90,    -1,    -1,    -1,    -1,    -1,    96,    97,    44,    45,
    46,    47,    48,    49,    -1,    51,    52,    53,    54,    -1,
    56,    -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,    65,
    66,    67,    -1,    -1,    -1,    71,    72,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,
    86,    87,    88,    89,    90,    -1,    -1,    -1,    -1,    -1,
    96,    97,    44,    45,    46,    47,    48,    49,    -1,    51,
    52,    53,    54,    -1,    56,    -1,    -1,    -1,    -1,    -1,
    62,    -1,    -1,    65,    66,    67,    -1,    -1,    -1,    71,
    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    84,    85,    86,    87,    88,    89,    90,    -1,
    -1,    -1,    -1,    -1,    96,    97,    44,    45,    46,    47,
    48,    49,    -1,    51,    52,    53,    54,    -1,    -1,    -1,
    -1,    59,    -1,    -1,    62,    -1,    -1,    65,    66,    67,
    -1,    -1,    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
    88,    89,    90,    -1,    -1,    -1,    -1,    -1,    96,    97,
    44,    45,    46,    47,    48,    49,    -1,    51,    52,    53,
    54,    -1,    56,    -1,    -1,    -1,    -1,    -1,    62,    -1,
    -1,    65,    66,    67,    -1,    -1,    -1,    71,    72,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    84,    85,    86,    87,    88,    89,    90,    -1,    -1,    -1,
    -1,    -1,    96,    97,    44,    45,    46,    47,    48,    49,
    -1,    51,    52,    53,    54,    -1,    56,    -1,    -1,    -1,
    -1,    -1,    62,    -1,    -1,    65,    66,    67,    -1,    -1,
    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    84,    85,    86,    87,    88,    89,
    90,    -1,    -1,    -1,    -1,    -1,    96,    97,    44,    45,
    46,    47,    48,    49,    -1,    51,    52,    53,    54,    -1,
    56,    -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,    65,
    66,    67,    -1,    -1,    -1,    71,    72,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,
    86,    87,    88,    89,    90,    -1,    -1,    -1,    -1,    -1,
    96,    97,    44,    45,    46,    47,    48,    49,    -1,    51,
    52,    53,    54,    -1,    -1,    -1,    -1,    59,    -1,    -1,
    62,    -1,    -1,    65,    66,    67,    -1,    -1,    -1,    71,
    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    84,    85,    86,    87,    88,    89,    90,    -1,
    -1,    -1,    -1,    -1,    96,    97,    44,    45,    46,    47,
    48,    49,    -1,    51,    52,    53,    54,    -1,    -1,    -1,
    -1,    59,    -1,    -1,    62,    -1,    -1,    65,    66,    67,
    -1,    -1,    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
    88,    89,    90,    -1,    -1,    -1,    -1,    -1,    96,    97,
    44,    45,    46,    47,    48,    49,    -1,    51,    52,    53,
    54,    -1,    -1,    -1,    -1,    59,    -1,    -1,    62,    -1,
    -1,    65,    66,    67,    -1,    -1,    -1,    71,    72,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    84,    85,    86,    87,    88,    89,    90,    -1,    -1,    -1,
    -1,    -1,    96,    97,    44,    45,    46,    47,    48,    49,
    -1,    51,    52,    53,    54,    -1,    -1,    -1,    -1,    59,
    -1,    -1,    62,    -1,    -1,    65,    66,    67,    -1,    -1,
    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    84,    85,    86,    87,    88,    89,
    90,    -1,    -1,    -1,    -1,    -1,    96,    97,    44,    45,
    46,    47,    48,    49,    -1,    51,    52,    53,    54,    -1,
    -1,    -1,    -1,    59,    -1,    -1,    62,    -1,    -1,    65,
    66,    67,    -1,    -1,    -1,    71,    72,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,
    86,    87,    88,    89,    90,    -1,    -1,    -1,    -1,    -1,
    96,    97,    44,    45,    46,    47,    48,    49,    -1,    51,
    52,    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    62,    -1,    -1,    65,    66,    67,    -1,    -1,    -1,    71,
    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    84,    85,    86,    87,    88,    89,    90,    -1,
    -1,    -1,    -1,    -1,    96,    97,    44,    45,    46,    47,
    48,    49,    -1,    51,    52,    53,    54,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    62,    -1,    -1,    65,    66,    67,
    -1,    -1,    -1,    71,    72,    44,    45,    46,    47,    48,
    49,    -1,    51,    52,    53,    54,    84,    85,    86,    87,
    88,    89,    90,    62,    -1,    -1,    65,    66,    67,    97,
    -1,    -1,    71,    72,    44,    45,    46,    47,    48,    49,
    -1,    51,    52,    53,    54,    84,    85,    86,    87,    88,
    -1,    90,    62,    -1,    -1,    65,    66,    67,    97,    -1,
    -1,    71,    72,    44,    45,    46,    47,    48,    49,    -1,
    51,    -1,    53,    54,    84,    85,    86,    87,    -1,    -1,
    90,    62,    -1,    -1,    65,    66,    67,    97,    -1,    -1,
    71,    72,    44,    45,    46,    47,    48,    49,    -1,    51,
    -1,    53,    54,    84,    85,    86,    87,    -1,    -1,    90,
    -1,    -1,    -1,    65,    66,    67,    97,    -1,    -1,    71,
    72,    44,    45,    46,    47,    48,    49,    -1,    51,    -1,
    -1,    54,    84,    85,    86,    87,    -1,    -1,    90,    -1,
    -1,    -1,    65,    66,    67,    97,    -1,    -1,    71,    72,
    44,    45,    46,    47,    48,    49,    -1,    51,    -1,    -1,
    54,    84,    85,    86,    87,    -1,    -1,    90,    -1,    -1,
    -1,    65,    66,    67,    97,    -1,    -1,    71,    72,    -1,
    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    86,    87,    -1,    -1,    90,    50,    -1,    68,
    69,    -1,    -1,    97,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    -1,    68,    69,    -1,    -1,    -1,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 162 "cmdgram.y"
{ ;
    break;}
case 2:
#line 167 "cmdgram.y"
{ yyval.stmt = nil; ;
    break;}
case 3:
#line 169 "cmdgram.y"
{ if(!gStatementList) { gStatementList = yyvsp[0].stmt; } else { gStatementList->append(yyvsp[0].stmt); } ;
    break;}
case 4:
#line 174 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 5:
#line 176 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 6:
#line 178 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 7:
#line 183 "cmdgram.y"
{ yyval.stmt = yyvsp[-2].stmt; for(StmtNode *walk = (yyvsp[-2].stmt);walk;walk = walk->getNext() ) walk->setPackage(yyvsp[-4].s.value); ;
    break;}
case 8:
#line 188 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 9:
#line 190 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; (yyvsp[-1].stmt)->append(yyvsp[0].stmt);  ;
    break;}
case 10:
#line 195 "cmdgram.y"
{ yyval.stmt = nil; ;
    break;}
case 11:
#line 197 "cmdgram.y"
{ if(!yyvsp[-1].stmt) { yyval.stmt = yyvsp[0].stmt; } else { (yyvsp[-1].stmt)->append(yyvsp[0].stmt); yyval.stmt = yyvsp[-1].stmt; } ;
    break;}
case 18:
#line 208 "cmdgram.y"
{ yyval.stmt = BreakStmtNode::alloc( yyvsp[-1].i.lineNumber ); ;
    break;}
case 19:
#line 210 "cmdgram.y"
{ yyval.stmt = ContinueStmtNode::alloc( yyvsp[-1].i.lineNumber ); ;
    break;}
case 20:
#line 212 "cmdgram.y"
{ yyval.stmt = ReturnStmtNode::alloc( yyvsp[-1].i.lineNumber, NULL ); ;
    break;}
case 21:
#line 214 "cmdgram.y"
{ yyval.stmt = ReturnStmtNode::alloc( yyvsp[-2].i.lineNumber, yyvsp[-1].expr ); ;
    break;}
case 22:
#line 216 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; ;
    break;}
case 23:
#line 218 "cmdgram.y"
{ yyval.stmt = TTagSetStmtNode::alloc( yyvsp[-3].s.lineNumber, yyvsp[-3].s.value, yyvsp[-1].expr, NULL ); ;
    break;}
case 24:
#line 220 "cmdgram.y"
{ yyval.stmt = TTagSetStmtNode::alloc( yyvsp[-5].s.lineNumber, yyvsp[-5].s.value, yyvsp[-3].expr, yyvsp[-1].expr ); ;
    break;}
case 25:
#line 222 "cmdgram.y"
{ yyval.stmt = StrConstNode::alloc( yyvsp[0].str.lineNumber, yyvsp[0].str.value, false, true ); ;
    break;}
case 26:
#line 227 "cmdgram.y"
{ yyval.stmt = FunctionDeclStmtNode::alloc( yyvsp[-7].i.lineNumber, yyvsp[-6].s.value, NULL, yyvsp[-4].var, yyvsp[-1].stmt ); ;
    break;}
case 27:
#line 229 "cmdgram.y"
{ yyval.stmt = FunctionDeclStmtNode::alloc( yyvsp[-9].i.lineNumber, yyvsp[-6].s.value, yyvsp[-8].s.value, yyvsp[-4].var, yyvsp[-1].stmt ); ;
    break;}
case 28:
#line 234 "cmdgram.y"
{ yyval.var = NULL; ;
    break;}
case 29:
#line 236 "cmdgram.y"
{ yyval.var = yyvsp[0].var; ;
    break;}
case 30:
#line 241 "cmdgram.y"
{ yyval.var = VarNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value, NULL ); ;
    break;}
case 31:
#line 243 "cmdgram.y"
{ yyval.var = yyvsp[-2].var; ((StmtNode*)(yyvsp[-2].var))->append((StmtNode*)VarNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value, NULL ) ); ;
    break;}
case 32:
#line 248 "cmdgram.y"
{ yyval.stmt = ObjectDeclNode::alloc( yyvsp[-9].i.lineNumber, yyvsp[-8].expr, yyvsp[-6].expr, NULL, yyvsp[-5].s.value, yyvsp[-2].slist, NULL, true, false, false); ;
    break;}
case 33:
#line 253 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-9].i.lineNumber, yyvsp[-8].expr, yyvsp[-6].expr, yyvsp[-4].expr, yyvsp[-5].s.value, yyvsp[-1].odcl.slots, yyvsp[-1].odcl.decls, false, false, false); ;
    break;}
case 34:
#line 255 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-5].expr, yyvsp[-3].expr, yyvsp[-1].expr, yyvsp[-2].s.value, NULL, NULL, false, false, false); ;
    break;}
case 35:
#line 257 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-11].i.lineNumber, yyvsp[-10].expr, yyvsp[-7].expr, yyvsp[-4].expr, yyvsp[-5].s.value, yyvsp[-1].odcl.slots, yyvsp[-1].odcl.decls, false, true, false); ;
    break;}
case 36:
#line 259 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-8].i.lineNumber, yyvsp[-7].expr, yyvsp[-4].expr, yyvsp[-1].expr, yyvsp[-2].s.value, NULL, NULL, false, true, false); ;
    break;}
case 37:
#line 261 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-9].i.lineNumber, yyvsp[-8].expr, yyvsp[-6].expr, yyvsp[-4].expr, yyvsp[-5].s.value, yyvsp[-1].odcl.slots, yyvsp[-1].odcl.decls, false, false, true); ;
    break;}
case 38:
#line 263 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-5].expr, yyvsp[-3].expr, yyvsp[-1].expr, yyvsp[-2].s.value, NULL, NULL, false, false, true); ;
    break;}
case 39:
#line 268 "cmdgram.y"
{ yyval.s.value = NULL; ;
    break;}
case 40:
#line 270 "cmdgram.y"
{ yyval.s = yyvsp[0].s; ;
    break;}
case 41:
#line 275 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc( CodeBlock::smCurrentParser->getCurrentLine(), "", false); ;
    break;}
case 42:
#line 277 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 43:
#line 282 "cmdgram.y"
{ yyval.expr = NULL; ;
    break;}
case 44:
#line 284 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 45:
#line 289 "cmdgram.y"
{ yyval.odcl.slots = NULL; yyval.odcl.decls = NULL; ;
    break;}
case 46:
#line 291 "cmdgram.y"
{ yyval.odcl.slots = yyvsp[0].slist; yyval.odcl.decls = NULL; ;
    break;}
case 47:
#line 293 "cmdgram.y"
{ yyval.odcl.slots = NULL; yyval.odcl.decls = yyvsp[0].od; ;
    break;}
case 48:
#line 295 "cmdgram.y"
{ yyval.odcl.slots = yyvsp[-1].slist; yyval.odcl.decls = yyvsp[0].od; ;
    break;}
case 49:
#line 300 "cmdgram.y"
{ yyval.od = yyvsp[-1].od; ;
    break;}
case 50:
#line 302 "cmdgram.y"
{ yyvsp[-2].od->append(yyvsp[-1].od); yyval.od = yyvsp[-2].od; ;
    break;}
case 51:
#line 307 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; ;
    break;}
case 52:
#line 309 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 53:
#line 314 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].ifnode; yyvsp[-1].ifnode->propagateSwitchExpr(yyvsp[-4].expr, false); ;
    break;}
case 54:
#line 316 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].ifnode; yyvsp[-1].ifnode->propagateSwitchExpr(yyvsp[-4].expr, true); ;
    break;}
case 55:
#line 321 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc( yyvsp[-3].i.lineNumber, yyvsp[-2].expr, yyvsp[0].stmt, NULL, false); ;
    break;}
case 56:
#line 323 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-5].expr, yyvsp[-3].stmt, yyvsp[0].stmt, false); ;
    break;}
case 57:
#line 325 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc( yyvsp[-4].i.lineNumber, yyvsp[-3].expr, yyvsp[-1].stmt, yyvsp[0].ifnode, true); ;
    break;}
case 58:
#line 330 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr;;
    break;}
case 59:
#line 332 "cmdgram.y"
{ (yyvsp[-2].expr)->append(yyvsp[0].expr); yyval.expr=yyvsp[-2].expr; ;
    break;}
case 60:
#line 337 "cmdgram.y"
{ yyval.stmt = IfStmtNode::alloc(yyvsp[-4].i.lineNumber, yyvsp[-2].expr, yyvsp[0].stmt, NULL, false); ;
    break;}
case 61:
#line 339 "cmdgram.y"
{ yyval.stmt = IfStmtNode::alloc(yyvsp[-6].i.lineNumber, yyvsp[-4].expr, yyvsp[-2].stmt, yyvsp[0].stmt, false); ;
    break;}
case 62:
#line 344 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-4].i.lineNumber, nil, yyvsp[-2].expr, nil, yyvsp[0].stmt, false); ;
    break;}
case 63:
#line 346 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-3].i.lineNumber, nil, yyvsp[-1].expr, nil, yyvsp[-4].stmt, true); ;
    break;}
case 64:
#line 351 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-8].i.lineNumber, yyvsp[-6].expr, yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 65:
#line 353 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i.lineNumber, yyvsp[-5].expr, yyvsp[-3].expr, NULL, yyvsp[0].stmt, false); ;
    break;}
case 66:
#line 355 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i.lineNumber, yyvsp[-5].expr, NULL, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 67:
#line 357 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i.lineNumber, yyvsp[-4].expr, NULL, NULL, yyvsp[0].stmt, false); ;
    break;}
case 68:
#line 359 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i.lineNumber, NULL, yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 69:
#line 361 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i.lineNumber, NULL, yyvsp[-3].expr, NULL, yyvsp[0].stmt, false); ;
    break;}
case 70:
#line 363 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i.lineNumber, NULL, NULL, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 71:
#line 365 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-5].i.lineNumber, NULL, NULL, NULL, yyvsp[0].stmt, false); ;
    break;}
case 72:
#line 370 "cmdgram.y"
{ yyval.stmt = IterStmtNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-4].s.value, yyvsp[-2].expr, yyvsp[0].stmt, false ); ;
    break;}
case 73:
#line 372 "cmdgram.y"
{ yyval.stmt = IterStmtNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-4].s.value, yyvsp[-2].expr, yyvsp[0].stmt, true ); ;
    break;}
case 74:
#line 377 "cmdgram.y"
{ yyval.stmt = yyvsp[0].expr; ;
    break;}
case 75:
#line 382 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 76:
#line 384 "cmdgram.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 77:
#line 386 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 78:
#line 388 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 79:
#line 390 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 80:
#line 392 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 81:
#line 394 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 82:
#line 396 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 83:
#line 398 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 84:
#line 400 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 85:
#line 402 "cmdgram.y"
{ yyval.expr = FloatUnaryExprNode::alloc( yyvsp[-1].i.lineNumber, yyvsp[-1].i.value, yyvsp[0].expr); ;
    break;}
case 86:
#line 404 "cmdgram.y"
{ yyval.expr = TTagDerefNode::alloc( yyvsp[-1].i.lineNumber, yyvsp[0].expr ); ;
    break;}
case 87:
#line 406 "cmdgram.y"
{ yyval.expr = TTagExprNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value ); ;
    break;}
case 88:
#line 408 "cmdgram.y"
{ yyval.expr = ConditionalExprNode::alloc( yyvsp[-4].expr->dbgLineNumber, yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 89:
#line 410 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 90:
#line 412 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 91:
#line 414 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 92:
#line 416 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 93:
#line 418 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 94:
#line 420 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 95:
#line 422 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 96:
#line 424 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 97:
#line 426 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 98:
#line 428 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 99:
#line 430 "cmdgram.y"
{ yyval.expr = StreqExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-2].expr, yyvsp[0].expr, true); ;
    break;}
case 100:
#line 432 "cmdgram.y"
{ yyval.expr = StreqExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-2].expr, yyvsp[0].expr, false); ;
    break;}
case 101:
#line 434 "cmdgram.y"
{ yyval.expr = StrcatExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].i.value); ;
    break;}
case 102:
#line 436 "cmdgram.y"
{ yyval.expr = IntUnaryExprNode::alloc(yyvsp[-1].i.lineNumber, yyvsp[-1].i.value, yyvsp[0].expr); ;
    break;}
case 103:
#line 438 "cmdgram.y"
{ yyval.expr = IntUnaryExprNode::alloc(yyvsp[-1].i.lineNumber, yyvsp[-1].i.value, yyvsp[0].expr); ;
    break;}
case 104:
#line 440 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc( yyvsp[0].str.lineNumber, yyvsp[0].str.value, true); ;
    break;}
case 105:
#line 442 "cmdgram.y"
{ yyval.expr = FloatNode::alloc( yyvsp[0].f.lineNumber, yyvsp[0].f.value ); ;
    break;}
case 106:
#line 444 "cmdgram.y"
{ yyval.expr = IntNode::alloc( yyvsp[0].i.lineNumber, yyvsp[0].i.value ); ;
    break;}
case 107:
#line 446 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc( yyvsp[0].i.lineNumber, StringTable->insert("break")); ;
    break;}
case 108:
#line 448 "cmdgram.y"
{ yyval.expr = SlotAccessNode::alloc( yyvsp[0].slot.lineNumber, yyvsp[0].slot.object, yyvsp[0].slot.array, yyvsp[0].slot.slotName ); ;
    break;}
case 109:
#line 450 "cmdgram.y"
{ yyval.expr = InternalSlotAccessNode::alloc( yyvsp[0].intslot.lineNumber, yyvsp[0].intslot.object, yyvsp[0].intslot.slotExpr, yyvsp[0].intslot.recurse); ;
    break;}
case 110:
#line 452 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value ); ;
    break;}
case 111:
#line 454 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc( yyvsp[0].str.lineNumber, yyvsp[0].str.value, false); ;
    break;}
case 112:
#line 456 "cmdgram.y"
{ yyval.expr = (ExprNode*)VarNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value, NULL); ;
    break;}
case 113:
#line 458 "cmdgram.y"
{ yyval.expr = (ExprNode*)VarNode::alloc( yyvsp[-3].s.lineNumber, yyvsp[-3].s.value, yyvsp[-1].expr ); ;
    break;}
case 114:
#line 463 "cmdgram.y"
{ yyval.slot.lineNumber = yyvsp[-2].expr->dbgLineNumber; yyval.slot.object = yyvsp[-2].expr; yyval.slot.slotName = yyvsp[0].s.value; yyval.slot.array = NULL; ;
    break;}
case 115:
#line 465 "cmdgram.y"
{ yyval.slot.lineNumber = yyvsp[-5].expr->dbgLineNumber; yyval.slot.object = yyvsp[-5].expr; yyval.slot.slotName = yyvsp[-3].s.value; yyval.slot.array = yyvsp[-1].expr; ;
    break;}
case 116:
#line 470 "cmdgram.y"
{ yyval.intslot.lineNumber = yyvsp[-2].expr->dbgLineNumber; yyval.intslot.object = yyvsp[-2].expr; yyval.intslot.slotExpr = yyvsp[0].expr; yyval.intslot.recurse = false; ;
    break;}
case 117:
#line 472 "cmdgram.y"
{ yyval.intslot.lineNumber = yyvsp[-2].expr->dbgLineNumber; yyval.intslot.object = yyvsp[-2].expr; yyval.intslot.slotExpr = yyvsp[0].expr; yyval.intslot.recurse = true; ;
    break;}
case 118:
#line 477 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value ); ;
    break;}
case 119:
#line 479 "cmdgram.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 120:
#line 484 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[0].i.lineNumber; yyval.asn.token = '+'; yyval.asn.expr = FloatNode::alloc( yyvsp[0].i.lineNumber, 1 ); ;
    break;}
case 121:
#line 486 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[0].i.lineNumber; yyval.asn.token = '-'; yyval.asn.expr = FloatNode::alloc( yyvsp[0].i.lineNumber, 1 ); ;
    break;}
case 122:
#line 488 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '+'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 123:
#line 490 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '-'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 124:
#line 492 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '*'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 125:
#line 494 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '/'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 126:
#line 496 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '%'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 127:
#line 498 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '&'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 128:
#line 500 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '^'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 129:
#line 502 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '|'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 130:
#line 504 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = opSHL; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 131:
#line 506 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = opSHR; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 132:
#line 511 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 133:
#line 513 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 134:
#line 515 "cmdgram.y"
{ yyval.expr = yyvsp[0].od; ;
    break;}
case 135:
#line 517 "cmdgram.y"
{ yyval.expr = AssignExprNode::alloc( yyvsp[-2].s.lineNumber, yyvsp[-2].s.value, NULL, yyvsp[0].expr); ;
    break;}
case 136:
#line 519 "cmdgram.y"
{ yyval.expr = AssignExprNode::alloc( yyvsp[-4].s.lineNumber, yyvsp[-4].s.value, NULL, ArrayNode::alloc( yyvsp[-4].s.lineNumber, yyvsp[-1].expr ) ); ;
    break;}
case 137:
#line 521 "cmdgram.y"
{ yyval.expr = AssignExprNode::alloc( yyvsp[-5].s.lineNumber, yyvsp[-5].s.value, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 138:
#line 523 "cmdgram.y"
{ yyval.expr = AssignExprNode::alloc( yyvsp[-7].s.lineNumber, yyvsp[-7].s.value, yyvsp[-5].expr, ArrayNode::alloc( yyvsp[-7].s.lineNumber, yyvsp[-1].expr )); ;
    break;}
case 139:
#line 525 "cmdgram.y"
{ yyval.expr = AssignOpExprNode::alloc( yyvsp[-1].s.lineNumber, yyvsp[-1].s.value, NULL, yyvsp[0].asn.expr, yyvsp[0].asn.token); ;
    break;}
case 140:
#line 527 "cmdgram.y"
{ yyval.expr = AssignOpExprNode::alloc( yyvsp[-4].s.lineNumber, yyvsp[-4].s.value, yyvsp[-2].expr, yyvsp[0].asn.expr, yyvsp[0].asn.token); ;
    break;}
case 141:
#line 529 "cmdgram.y"
{ yyval.expr = SlotAssignOpNode::alloc( yyvsp[-1].slot.lineNumber, yyvsp[-1].slot.object, yyvsp[-1].slot.slotName, yyvsp[-1].slot.array, yyvsp[0].asn.token, yyvsp[0].asn.expr); ;
    break;}
case 142:
#line 531 "cmdgram.y"
{ yyval.expr = SlotAssignNode::alloc( yyvsp[-2].slot.lineNumber, yyvsp[-2].slot.object, yyvsp[-2].slot.array, yyvsp[-2].slot.slotName, yyvsp[0].expr); ;
    break;}
case 143:
#line 533 "cmdgram.y"
{ yyval.expr = SlotAssignNode::alloc( yyvsp[-4].slot.lineNumber, yyvsp[-4].slot.object, yyvsp[-4].slot.array, yyvsp[-4].slot.slotName, ArrayNode::alloc(yyvsp[-4].slot.lineNumber, yyvsp[-1].expr)); ;
    break;}
case 144:
#line 538 "cmdgram.y"
{ yyval.expr = FuncCallExprNode::alloc( yyvsp[-3].s.lineNumber, yyvsp[-3].s.value, NULL, yyvsp[-1].expr, false); ;
    break;}
case 145:
#line 540 "cmdgram.y"
{ yyval.expr = FuncCallExprNode::alloc( yyvsp[-5].s.lineNumber, yyvsp[-3].s.value, yyvsp[-5].s.value, yyvsp[-1].expr, false); ;
    break;}
case 146:
#line 542 "cmdgram.y"
{ yyvsp[-5].expr->append(yyvsp[-1].expr); yyval.expr = FuncCallExprNode::alloc( yyvsp[-5].expr->dbgLineNumber, yyvsp[-3].s.value, NULL, yyvsp[-5].expr, true); ;
    break;}
case 147:
#line 547 "cmdgram.y"
{ yyval.expr = AssertCallExprNode::alloc( yyvsp[-3].i.lineNumber, yyvsp[-1].expr, NULL ); ;
    break;}
case 148:
#line 549 "cmdgram.y"
{ yyval.expr = AssertCallExprNode::alloc( yyvsp[-5].i.lineNumber, yyvsp[-3].expr, yyvsp[-1].str.value ); ;
    break;}
case 149:
#line 554 "cmdgram.y"
{ yyval.expr = NULL; ;
    break;}
case 150:
#line 556 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 151:
#line 558 "cmdgram.y"
{ yyval.expr = ArrayNode::alloc( yyvsp[-2].i.lineNumber, yyvsp[-1].expr ); ;
    break;}
case 152:
#line 563 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 153:
#line 565 "cmdgram.y"
{ (yyvsp[-2].expr)->append(yyvsp[0].expr); yyval.expr = yyvsp[-2].expr; ;
    break;}
case 154:
#line 570 "cmdgram.y"
{ yyval.slist = NULL; ;
    break;}
case 155:
#line 572 "cmdgram.y"
{ yyval.slist = yyvsp[0].slist; ;
    break;}
case 156:
#line 577 "cmdgram.y"
{ yyval.slist = yyvsp[0].slist; ;
    break;}
case 157:
#line 579 "cmdgram.y"
{ yyvsp[-1].slist->append(yyvsp[0].slist); yyval.slist = yyvsp[-1].slist; ;
    break;}
case 158:
#line 584 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-3].s.lineNumber, NULL, NULL, yyvsp[-3].s.value, yyvsp[-1].expr); ;
    break;}
case 159:
#line 586 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-4].i.lineNumber, NULL, NULL, yyvsp[-3].s.value, yyvsp[-1].expr, yyvsp[-4].i.value); ;
    break;}
case 160:
#line 588 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-3].i.lineNumber, NULL, NULL, StringTable->insert("datablock"), yyvsp[-1].expr); ;
    break;}
case 161:
#line 590 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-6].s.lineNumber, NULL, yyvsp[-4].expr, yyvsp[-6].s.value, yyvsp[-1].expr); ;
    break;}
case 162:
#line 592 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-7].i.lineNumber, NULL, yyvsp[-4].expr, yyvsp[-6].s.value, yyvsp[-1].expr, yyvsp[-7].i.value); ;
    break;}
case 163:
#line 597 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 164:
#line 599 "cmdgram.y"
{ yyval.expr = CommaCatExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 601 "cmdgram.y"
